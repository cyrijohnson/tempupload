import React, { useCallback, useEffect, useState } from "react";

// mui
import { Box, Grid, Tooltip, Tab, Tabs } from "@mui/material";
import { styled } from "@mui/material/styles";
import Add from "@mui/icons-material/Add";
import Remove from "@mui/icons-material/Remove";

// custom components
import LazyImage from "components/LazyImage";
import BazarAvatar from "components/BazarAvatar";
import BazarButton from "components/BazarButton";
import BazarRating from "components/BazarRating";
import { H1, H2, H3, H6 } from "components/Typography";
import FlexBox from "components/FlexBox";
import ProductDescription from "components/products/ProductDescription";
import ProductReview from "components/products/ProductReview";
import SizerGrid from "components/SizerGrid";

// hooks
import { useRouter } from "next/router";
import { useCart } from "react-use-cart";
import useAuth from "contexts/useAuth";
import axios from "utils/axios";

// utils
import { SERVER_URL } from "constant";
import Link from "next/link";
import AutoGeneratedFieldGroup from "components/AutoGeneratedFieldGroup";
import isEqual from "lodash.isequal";

const StyledTabs = styled(Tabs)(({ theme }) => ({
  marginTop: 80,
  marginBottom: 24,
  minHeight: 0,
  borderBottom: `1px solid ${theme.palette.text.disabled}`,
  "& .inner-tab": {
    fontWeight: 600,
    minHeight: 40,
    textTransform: "capitalize",
  },
}));

const ProductIntro = ({ product, onVariationSelected }) => {
  const { id, name, brand, tags, category, rating, stock, discounts } = product;

  const { user, refreshUser } = useAuth();
  const router = useRouter();
  const routerVariation = router.query.variation;

  // cart ------------------------------------------------------------------------------------
  const { items, updateItemQuantity, addItem } = useCart();

  const [orderItems, setOrderItems] = useState([]);
  const [selectedOrderItem, setSelectedOrderItem] = useState(null);
  const [selectedAttributes, setSelectedAttributes] = useState([]);

  const cartItem =
    selectedOrderItem?.variations?.length == 1
      ? items.find((item) => item.id === selectedOrderItem?.id)
      : items.find(
          (item) =>
            item.id === selectedOrderItem?.id &&
            item.variation === selectedOrderItem?.variation &&
            isEqual(item.attributes, selectedAttributes)
        );

  // product and variations ------------------------------------------------------------
  const [selectableProductVariations, setSelectableProductVariations] =
    useState([]);
  useEffect(() => {
    let orderItms = [];
    let selectable = [];

    // process items and variations
    product.variations.forEach((variation, index) => {
      // store parent
      selectable.push({ ...variation, index });
      // process sizes (THESE ARE WHAT IS BOUGHT!)
      variation.items.forEach((variant) => {
        orderItms.push({
          id: product.id,
          index: index,
          name: product.name + "  - " + variation.name,
          price: variant.price,
          discountedPrice: variant.discountedPrice,
          product: product.id,
          variation: variant.id,
          attributes: variant.attributes,
          customizable: product.customizable,
          items: variation.items,
          images: [
            {
              url: variation.image ? variation.image.url : "/ImgNotFound.png",
            },
            ...product.images,
          ],
        });
      });
    });
    setSelectedOrderItem(selectable[0]);
    onVariationSelected(selectable[0]);
    setSelectableProductVariations(selectable);
    setOrderItems(orderItms);
    setupImage(selectable[0].image, 0);

    // if we have only 1 variation, it's a special product
    if (product.variations.length === 1) {
      setSelectedOrderItem(product);
    }
  }, [product]);

  // select order item -----------------------------------------------------------------------
  useEffect(() => {
    if (selectableProductVariations.length == 0) return;
    if (routerVariation) {
      let itemFound = selectableProductVariations.find(
        (item) => item.id == routerVariation
      );
      let ind = selectableProductVariations.indexOf(itemFound);
      setSelectedOrderItem(itemFound);
      onVariationSelected(itemFound);
      setupImage(itemFound.image, product.images.length + ind - 1);
    }
  }, [selectableProductVariations]);

  const handleVariationSelect = (ind) => () => {
    console.log(selectableProductVariations[ind]);
    setSelectedOrderItem(selectableProductVariations[ind]);
    setupImage(
      selectableProductVariations[ind].image,
      product.images.length + ind - 1
    );
    setSelectedAttributes([]);
    onVariationSelected(selectableProductVariations[ind]);
  };

  // images ----------------------------------------------------------------------------------
  const [images, setImages] = useState([]);
  const [selectedImage, setSelectedImage] = useState(0);

  const handleImageClick = (ind) => () => {
    setSelectedImage(product.images.length + ind - 1);
  };

  const setupImage = (img, ind = null) => {
    let allImages = [...product.images, img];

    setImages(allImages);
    if (ind) setSelectedImage(ind);
  };

  // description and reviews -----------------------------------------------------------------
  const [selectedTab, setSelectedTab] = useState(0);
  const [reviews, setReviews] = useState([]);

  // tabs (reviews / description) ------------------------------------------------------------
  const handleTabClick = (_event, newValue) => {
    setSelectedTab(newValue);
  };

  // load reviews
  useEffect(() => {
    async function getReviews() {
      if (product) {
        const res = await axios.get("/product-reviews/" + product.id);
        setReviews(res.data);
      }
    }

    getReviews();
  }, [product]);

  return (
    <Box width="100%">
      <Grid container justifyContent="space-around">
        <Grid item md={6} xs={12}>
          {images.length > 0 && (
            <Box>
              <FlexBox
                justifyContent="center"
                mt={6}
                mb={6}
                alignItems="center"
                sx={{ height: "100%" }}
              >
                <LazyImage
                  src={
                    images[selectedImage].url.length > 0
                      ? SERVER_URL + images[selectedImage].url
                      : "/ImgNotFound.png"
                  }
                  // onClick={() => openImageViewer()}
                  alt={name}
                  height={450}
                  width={450}
                  loading="eager"
                  objectFit="contain"
                />
              </FlexBox>
              <FlexBox overflow="auto">
                {images.map((img, ind) => (
                  <Box
                    height={64}
                    width={64}
                    minWidth={64}
                    bgcolor="white"
                    borderRadius="10px"
                    display="flex"
                    justifyContent="center"
                    alignItems="center"
                    border="1px solid"
                    style={{
                      cursor: "pointer",
                    }}
                    ml={ind === 0 ? "auto" : 0}
                    mr={ind === images.length - 1 ? "auto" : "10px"}
                    borderColor={
                      selectedImage === ind ? "primary.main" : "grey.400"
                    }
                    onClick={handleImageClick(ind)}
                    key={ind}
                  >
                    <BazarAvatar
                      src={SERVER_URL + img.url}
                      variant="square"
                      height={40}
                    />
                  </Box>
                ))}
              </FlexBox>
            </Box>
          )}
        </Grid>
        {selectedOrderItem && (
          <Grid item md={6} xs={12} alignItems="center">
            <H1 mb={2}>
              {selectedOrderItem.items == null
                ? selectedOrderItem.name
                : `${name} - ${selectedOrderItem.name}`}
            </H1>

            {/* PRICE ------------------------------------------------------------------------------------ */}
            <Box mb={3}>
              <FlexBox alignItems="center">
                {!selectedOrderItem.discountedPrice && (
                  <H2 mb={0.5} lineHeight="1" color="info.main">
                    £{selectedOrderItem.price.toFixed(2)}
                  </H2>
                )}
                {selectedOrderItem.discountedPrice && (
                  <H2 pr={1} color="info.main" mb={0.5} lineHeight="1">
                    £{selectedOrderItem.discountedPrice.toFixed(2)}
                  </H2>
                )}
                {selectedOrderItem.discountedPrice && (
                  <H2 color="grey.600" fontWeight="600" mb={0.5} lineHeight="1">
                    <del>{selectedOrderItem.price.toFixed(2)}</del>
                  </H2>
                )}
              </FlexBox>
              {stock > 0 && <Box color="inherit">In Stock</Box>}
              {stock <= 0 && <Box color="inherit">Not in stock</Box>}
            </Box>

            {/* VARIATIONS ------------------------------------------------------------------------------------ */}
            <FlexBox overflow="auto" alignItems="center" mb={2}>
              {product.variations.map(
                (variation, ind) =>
                  variation.items.length > 0 && (
                    <Box
                      height={64}
                      width={64}
                      minWidth={64}
                      bgcolor="white"
                      borderRadius="10px"
                      display="flex"
                      justifyContent="center"
                      alignItems="center"
                      border="1px solid"
                      style={{
                        cursor: "pointer",
                      }}
                      mr={"10px"}
                      borderColor={
                        selectedOrderItem?.index === ind
                          ? "primary.main"
                          : "grey.400"
                      }
                      onClick={handleVariationSelect(ind)}
                      key={ind}
                    >
                      <Tooltip title={variation.name} placement="top">
                        <BazarAvatar
                          src={
                            variation.image
                              ? SERVER_URL + variation.image.url
                              : "/ImgNotFound.png"
                          }
                          variant="square"
                          height={40}
                        />
                      </Tooltip>
                    </Box>
                  )
              )}
            </FlexBox>

            <FlexBox alignItems="center" mb={2}>
              <Box lineHeight="1">Rating:</Box>
              <Box mx={1} lineHeight="1">
                <BazarRating
                  color="warn"
                  fontSize="1.25rem"
                  value={rating}
                  readOnly
                />
              </Box>
              {/* <H6 lineHeight="1">(50)</H6> */}
            </FlexBox>

            {/* ATTRIBUTES -------------------------------------------------------------------------------------- */}
            {selectedOrderItem.variations &&
              selectedOrderItem.variations.length == 1 &&
              selectedOrderItem.variations[0].attributes.categories.length >
                0 && (
                <>
                  <AutoGeneratedFieldGroup
                    data={selectedOrderItem.variations[0].attributes.categories.map(
                      (category) => {
                        return {
                          name: category,
                          type: selectedOrderItem.variations[0].attributes[
                            category
                          ].type,
                          options:
                            selectedOrderItem.variations[0].attributes[category]
                              .options,
                        };
                      }
                    )}
                    onChange={(data) => {
                      let sel = [...data].map((item) =>
                        item.selected.name ? item.selected.name : item.selected
                      );
                      // remove "color" as it's part of the variation
                      sel = sel.filter((item) => item !== "color");
                      setSelectedAttributes(sel);
                      // console.log("Updating selected attributes");
                    }}
                  />
                  <Grid item xs={12}>
                    {!cartItem?.quantity ? (
                      <>
                        {selectedOrderItem.stock > 0 && (
                          <BazarButton
                            variant="contained"
                            color="primary"
                            sx={{
                              mb: "36px",
                              px: "1.75rem",
                              height: "40px",
                            }}
                            onClick={() => {
                              console.log(selectedOrderItem);
                              let toUpdate = {
                                id: selectedOrderItem.id,
                                productID: selectedOrderItem.id,
                                name: `${selectedOrderItem.name}`,
                                price: selectedOrderItem.price,
                                imgUrl:
                                  SERVER_URL + selectedOrderItem.images[0].url,
                                variation: selectedOrderItem.id,
                                attributes: selectedOrderItem.attribs,
                                discountedPrice:
                                  selectedOrderItem.discountedPrice ?? 0,
                                customizable: parent.customizable,
                                addons: [],
                                customizations: [],
                              };
                              addItem(toUpdate);
                            }}
                            disabled={selectedOrderItem.stock <= 0}
                          >
                            Add to Cart
                          </BazarButton>
                        )}

                        {user != null && selectedOrderItem.stock == 0 && (
                          <>
                            <BazarButton
                              color="primary"
                              onClick={async () => {
                                try {
                                  let list = await axios.post(
                                    `/subscriptions/${selectedOrderItem.id}`
                                  );
                                  refreshUser();
                                } catch (e) {
                                  console.log(e);
                                }
                                refreshUser();
                              }}
                            >
                              {user &&
                              user.subscriptions.find(
                                (s) => s.id == selectedOrderItem.id
                              )
                                ? "Remove notifications for this product"
                                : "Notify me when back in stock"}
                            </BazarButton>
                          </>
                        )}
                      </>
                    ) : (
                      <FlexBox alignItems="center" mb={4.5}>
                        <BazarButton
                          sx={{
                            p: "9px",
                          }}
                          variant="outlined"
                          size="small"
                          color="primary"
                          onClick={() =>
                            updateItemQuantity(
                              cartItem.id,
                              cartItem.quantity - 1
                            )
                          }
                        >
                          <Remove fontSize="small" />
                        </BazarButton>
                        <H3 fontWeight="600" mx={2.5}>
                          {cartItem?.quantity.toString().padStart(2, "0")}
                        </H3>

                        <BazarButton
                          sx={{
                            p: "9px",
                          }}
                          variant="outlined"
                          size="small"
                          color="primary"
                          onClick={() =>
                            updateItemQuantity(
                              cartItem.id,
                              cartItem.quantity + 1
                            )
                          }
                          disabled={
                            selectedOrderItem.stock - cartItem.quantity <= 0
                          }
                        >
                          <Add fontSize="small" />
                        </BazarButton>
                      </FlexBox>
                    )}
                  </Grid>
                </>
              )}

            {/* Info -------------------------------------------------------------------------------------- */}
            <FlexBox alignItems="center" mb={2}>
              <Box>Brand:</Box>
              <Box mx={1}>
                <Link href="/shop/fdfdsa">
                  <a>
                    <H6 ml={1}>{brand.name}</H6>
                  </a>
                </Link>
              </Box>
            </FlexBox>

            <FlexBox alignItems="center" mb={2}>
              <Box>Category:</Box>
              <Box mx={1}>
                <Link href="/shop/fdfdsa">
                  <a>
                    <H6 ml={1}>{category.name}</H6>
                  </a>
                </Link>
              </Box>
            </FlexBox>

            <FlexBox alignItems="center" mb={2}>
              <Box>Tags:</Box>
              {tags.map((tag, ind) => (
                <Box mx={1} key={ind}>
                  <Link href="/shop/fdfdsa">
                    <a>
                      <H6 ml={1}>{tag.name}</H6>
                    </a>
                  </Link>
                </Box>
              ))}
            </FlexBox>

            {/* DESCRIPTION / REVIEWS -------------------------------------------------------------------------------*/}
            <Grid item xs={10} sx={{ mb: 15 }}>
              <StyledTabs
                value={selectedTab}
                onChange={handleTabClick}
                indicatorColor="primary"
                textColor="primary"
              >
                <Tab className="inner-tab" label="Description" />
                {/* {reviews.length > 0 && ( */}
                <Tab
                  className="inner-tab"
                  label={`Reviews ${product.reviews.length}`}
                />
                {/* )} */}
              </StyledTabs>

              <Box mb={6} sx={{ height: "auto" }}>
                {selectedTab === 0 && (
                  <ProductDescription description={product.description} />
                )}
                {selectedTab === 1 && (
                  <ProductReview
                    reviews={reviews}
                    id={id}
                    open={selectedTab === 1}
                  />
                )}
              </Box>
            </Grid>
          </Grid>
        )}

        {/* SELECTOR GRID -------------------------------------------------------------------------------------- */}
        <Grid container alignItems="center" my={4.5} justifyContent="center">
          {selectedOrderItem && selectedOrderItem.items && (
            <SizerGrid
              parent={selectedOrderItem}
              variants={selectedOrderItem.items}
            />
          )}
        </Grid>
      </Grid>
    </Box>
  );
};

export default ProductIntro;
